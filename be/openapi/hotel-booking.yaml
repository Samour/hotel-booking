openapi: 3.0.3
info:
  title: Hotel Booking
  description: Simple example of hotel booking app
  version: 1.0.0

paths:

  # ============ Auth endpoints ============
  /api/auth/v0/session:
    post:
      operationId: logIn
      summary: Log in using credentials
      description: |
        Log in with username/password. Successful authentication will result in a "SessionId" cookie being set
      tags:
        - authUnstable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - login_id
                - password
              properties:
                login_id:
                  type: string
                password:
                  description: User password; secret
                  type: string
      responses:
        "201":
          description: Authentication successful & session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                format: cookie
        "401":
          description: Invalid credentials provided
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'


    get:
      operationId: fetchAuthState
      summary: Get current authentication state
      security:
        - session: [ ]
      tags:
        - authUnstable
      responses:
        "200":
          description: Return details of currently authenticated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'

  /api/auth/v0/session/anonymous:
    post:
      operationId: createAnonymousSession
      summary: Create anonymous user & a session for the new user
      tags:
        - authUnstable
      responses:
        "201":
          description: Return details of newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                format: cookie

  /api/auth/v0/user:
    post:
      operationId: signUp
      summary: Sign up as a new customer & create a session for the new user
      description: |
        Session credentials are optional for this endpoint. If called with credentials of an anonymous user,
        the sign-in credentials will be stored against the anonymous user ID & that user will no longer be anonymous.
      security:
        - session: [ ]
      tags:
        - authUnstable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - login_id
                - password
                - name
              properties:
                login_id:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                format: cookie
        "409":
          description: |
            Username is not available
            This code will also be sent if supplied session is associated with a non-anonymous user
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'

  # ============ Admin endpoints ============
  /api/admin/v0/room-type:
    post:
      operationId: addRoomType
      summary: Add a new room type
      security:
        - session: [ MANAGE_ROOMS ]
      tags:
        - adminUnstable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price_per_night
                - stock_level
              properties:
                title:
                  type: string
                description:
                  type: string
                image_urls:
                  type: array
                  items:
                    type: string
                    format: url
                price_per_night:
                  type: integer
                stock_level:
                  type: integer
      responses:
        "201":
          description: Room type successfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - room_type_id
                properties:
                  room_type_id:
                    type: string

  /api/admin/v0/user:
    post:
      operationId: createUser
      summary: Create a new user with specified roles
      security:
        - session: [ MANAGE_USERS ]
      tags:
        - adminUnstable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - login_id
                - password
                - name
                - roles
              properties:
                login_id:
                  type: string
                password:
                  type: string
                name:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserRole'
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    type: string
        "409":
          description: Username is not available
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'

  # ============ Customer endpoints ============
  /api/customer/v0/room-type/availability:
    get:
      operationId: fetchRoomsAvailability
      summary: Load room details with availabilities
      security:
        - { }
        - session: [ CUSTOMER ]
      tags:
        - customerUnstable
      parameters:
        - in: query
          name: availability_range_start
          schema:
            type: string
            format: date
          description: Start date (inclusive) for availability data to be returned
        - in: query
          name: availability_range_end
          schema:
            type: string
            format: date
          description: End date (inclusive) for availability data to be returned
      responses:
        "200":
          description: List of room types & their available dates
          content:
            application/json:
              schema:
                type: object
                required:
                  - room_types
                properties:
                  room_types:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoomTypeWithAvailability'

  /api/customer/v0/room-type/hold:
    post:
      operationId: holdRoom
      summary: Temporarily hold a room for certain dates
      security:
        - session: [ CUSTOMER ]
      tags:
        - customerUnstable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - room_type_id
                - hold_start_date
                - hold_end_date
              properties:
                room_type_id:
                  type: string
                hold_start_date:
                  type: string
                  format: date
                hold_end_date:
                  type: string
                  format: date
      responses:
        "201":
          description: Hold successfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - room_hold_id
                  - hold_expiry
                properties:
                  room_hold_id:
                    type: string
                  hold_expiry:
                    type: string
                    format: date-time
                  removed_room_hold_id:
                    type: string
        "409":
          description: Hold could not be created due to unavailable stock levels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'


components:
  securitySchemes:
    session:
      type: apiKey
      in: cookie
      name: SessionId

  schemas:

    # ============ Error (general purpose) schemas ============
    ProblemResponse:
      type: object
      required:
        - title
        - code
        - status
        - detail
        - instance
      properties:
        title:
          type: string
        code:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        extendedDetails:
          type: array
          items:
            type: object
            required:
              - code
              - detail
            properties:
              code:
                type: string
              detail:
                type: string

    # ============ Auth schemas ============
    SessionResponse:
      type: object
      required:
        - user_id
        - user_roles
        - anonymous_user
        - session_expiry_time
      properties:
        user_id:
          type: string
        login_id:
          type: string
        user_roles:
          type: array
          items:
            type: string
        anonymous_user:
          type: boolean
        session_expiry_time:
          type: string
          format: date-time

    UserRole:
      type: string
      enum:
        - CUSTOMER
        - MANAGE_USERS
        - MANAGE_ROOMS

    # ============ Customer schemas ============
    RoomTypeWithAvailability:
      type: object
      required:
        - room_type_id
        - description
        - room_availability
      properties:
        room_type_id:
          type: string
        description:
          $ref: '#/components/schemas/RoomDescription'
        room_availability:
          type: array
          items:
            $ref: '#/components/schemas/DateAvailability'

    RoomDescription:
      type: object
      required:
        - title
        - price_per_night
        - description
        - image_urls
      properties:
        title:
          type: string
        price_per_night:
          type: integer
        description:
          type: string
        image_urls:
          type: array
          items:
            type: string
            format: url

    DateAvailability:
      type: object
      required:
        - date
        - available
      properties:
        date:
          type: string
          format: date
        available:
          type: boolean
